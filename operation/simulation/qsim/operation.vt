// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "11/29/2018 14:49:57"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    teste
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module teste_vlg_sample_tst(
	clock,
	ready,
	tecla,
	sampler_tx
);
input  clock;
input  ready;
input [3:0] tecla;
output sampler_tx;

reg sample;
time current_time;
always @(clock or ready or tecla)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module teste_vlg_check_tst (
	debug,
	estate,
	sampler_rx
);
input  debug;
input [1:0] estate;
input sampler_rx;

reg  debug_expected;
reg [1:0] estate_expected;

reg  debug_prev;
reg [1:0] estate_prev;

reg  debug_expected_prev;
reg [1:0] estate_expected_prev;

reg  last_debug_exp;
reg [1:0] last_estate_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:2] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 2'b1;
end

// update real /o prevs

always @(trigger)
begin
	debug_prev = debug;
	estate_prev = estate;
end

// update expected /o prevs

always @(trigger)
begin
	debug_expected_prev = debug_expected;
	estate_expected_prev = estate_expected;
end


// expected estate[ 1 ]
initial
begin
	estate_expected[1] = 1'bX;
end 
// expected estate[ 0 ]
initial
begin
	estate_expected[0] = 1'bX;
end 

// expected debug
initial
begin
	debug_expected = 1'bX;
end 
// generate trigger
always @(debug_expected or debug or estate_expected or estate)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected debug = %b | expected estate = %b | ",debug_expected_prev,estate_expected_prev);
	$display("| real debug = %b | real estate = %b | ",debug_prev,estate_prev);
`endif
	if (
		( debug_expected_prev !== 1'bx ) && ( debug_prev !== debug_expected_prev )
		&& ((debug_expected_prev !== last_debug_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port debug :: @time = %t",  $realtime);
		$display ("     Expected value = %b", debug_expected_prev);
		$display ("     Real value = %b", debug_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_debug_exp = debug_expected_prev;
	end
	if (
		( estate_expected_prev[0] !== 1'bx ) && ( estate_prev[0] !== estate_expected_prev[0] )
		&& ((estate_expected_prev[0] !== last_estate_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estate[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estate_expected_prev);
		$display ("     Real value = %b", estate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_estate_exp[0] = estate_expected_prev[0];
	end
	if (
		( estate_expected_prev[1] !== 1'bx ) && ( estate_prev[1] !== estate_expected_prev[1] )
		&& ((estate_expected_prev[1] !== last_estate_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port estate[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", estate_expected_prev);
		$display ("     Real value = %b", estate_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_estate_exp[1] = estate_expected_prev[1];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#20000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module teste_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg ready;
reg [3:0] tecla;
// wires                                               
wire debug;
wire [1:0] estate;

wire sampler;                             

// assign statements (if any)                          
teste i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.debug(debug),
	.estate(estate),
	.ready(ready),
	.tecla(tecla)
);

// clock
always
begin
	clock = 1'b0;
	clock = #20000 1'b1;
	#20000;
end 

// ready
initial
begin
	repeat(41)
	begin
		ready = 1'b0;
		ready = #240000 1'b1;
		# 240000;
	end
	ready = 1'b0;
	ready = #240000 1'b1;
end 
// tecla[ 3 ]
initial
begin
	tecla[3] = 1'b0;
	tecla[3] = #480000 1'b1;
	tecla[3] = #1920000 1'b0;
	tecla[3] = #960000 1'b1;
	tecla[3] = #480000 1'b0;
	tecla[3] = #960000 1'b1;
	tecla[3] = #480000 1'b0;
	tecla[3] = #480000 1'b1;
	tecla[3] = #480000 1'b0;
	tecla[3] = #1440000 1'b1;
	tecla[3] = #480000 1'b0;
	tecla[3] = #960000 1'b1;
	tecla[3] = #480000 1'b0;
	tecla[3] = #480000 1'b1;
	tecla[3] = #1920000 1'b0;
	tecla[3] = #1440000 1'b1;
	tecla[3] = #960000 1'b0;
	tecla[3] = #480000 1'b1;
	tecla[3] = #960000 1'b0;
	tecla[3] = #480000 1'b1;
	tecla[3] = #480000 1'b0;
	tecla[3] = #960000 1'b1;
	tecla[3] = #480000 1'b0;
	tecla[3] = #480000 1'b1;
	tecla[3] = #480000 1'b0;
	tecla[3] = #480000 1'b1;
end 
// tecla[ 2 ]
initial
begin
	tecla[2] = 1'b1;
	tecla[2] = #480000 1'b0;
	tecla[2] = #480000 1'b1;
	tecla[2] = #480000 1'b0;
	tecla[2] = #1440000 1'b1;
	tecla[2] = #480000 1'b0;
	tecla[2] = #480000 1'b1;
	tecla[2] = #480000 1'b0;
	tecla[2] = #960000 1'b1;
	tecla[2] = #480000 1'b0;
	tecla[2] = #960000 1'b1;
	tecla[2] = #480000 1'b0;
	tecla[2] = #1920000 1'b1;
	tecla[2] = #960000 1'b0;
	tecla[2] = #1920000 1'b1;
	tecla[2] = #3360000 1'b0;
	tecla[2] = #480000 1'b1;
	tecla[2] = #960000 1'b0;
	tecla[2] = #960000 1'b1;
	tecla[2] = #480000 1'b0;
	tecla[2] = #960000 1'b1;
	tecla[2] = #480000 1'b0;
end 
// tecla[ 1 ]
initial
begin
	tecla[1] = 1'b0;
	tecla[1] = #960000 1'b1;
	tecla[1] = #960000 1'b0;
	tecla[1] = #480000 1'b1;
	tecla[1] = #480000 1'b0;
	tecla[1] = #2880000 1'b1;
	tecla[1] = #2880000 1'b0;
	tecla[1] = #480000 1'b1;
	tecla[1] = #480000 1'b0;
	tecla[1] = #480000 1'b1;
	tecla[1] = #480000 1'b0;
	tecla[1] = #960000 1'b1;
	tecla[1] = #480000 1'b0;
	tecla[1] = #1920000 1'b1;
	tecla[1] = #480000 1'b0;
	tecla[1] = #960000 1'b1;
	tecla[1] = #480000 1'b0;
	tecla[1] = #1440000 1'b1;
	tecla[1] = #960000 1'b0;
	tecla[1] = #1440000 1'b1;
end 
// tecla[ 0 ]
initial
begin
	tecla[0] = 1'b1;
	tecla[0] = #480000 1'b0;
	tecla[0] = #960000 1'b1;
	tecla[0] = #1440000 1'b0;
	tecla[0] = #960000 1'b1;
	tecla[0] = #480000 1'b0;
	tecla[0] = #480000 1'b1;
	tecla[0] = #480000 1'b0;
	tecla[0] = #480000 1'b1;
	tecla[0] = #480000 1'b0;
	tecla[0] = #480000 1'b1;
	tecla[0] = #2400000 1'b0;
	tecla[0] = #960000 1'b1;
	tecla[0] = #480000 1'b0;
	tecla[0] = #480000 1'b1;
	tecla[0] = #960000 1'b0;
	tecla[0] = #480000 1'b1;
	tecla[0] = #2400000 1'b0;
	tecla[0] = #960000 1'b1;
	tecla[0] = #480000 1'b0;
	tecla[0] = #1920000 1'b1;
	tecla[0] = #960000 1'b0;
	tecla[0] = #480000 1'b1;
end 

teste_vlg_sample_tst tb_sample (
	.clock(clock),
	.ready(ready),
	.tecla(tecla),
	.sampler_tx(sampler)
);

teste_vlg_check_tst tb_out(
	.debug(debug),
	.estate(estate),
	.sampler_rx(sampler)
);
endmodule

